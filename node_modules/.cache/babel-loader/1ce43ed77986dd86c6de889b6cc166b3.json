{"remainingRequest":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js!/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/table/table-row-selection.js","dependencies":[{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/table/table-row-selection.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZXZlcnkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHNlbGVjdGlvbjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdub25lJywKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodikgewogICAgICAgIHJldHVybiBbJ3NpbmdsZScsICdtdWx0aXBsZScsICdub25lJ10uaW5jbHVkZXModik7CiAgICAgIH0KICAgIH0sCiAgICBzZWxlY3RlZDogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgc2VsZWN0ZWRLZXlzOiBmdW5jdGlvbiBzZWxlY3RlZEtleXMoKSB7CiAgICAgIHZhciBrZXlzID0ge307CiAgICAgIHRoaXMuc2VsZWN0ZWQubWFwKHRoaXMuZ2V0Um93S2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBrZXlzW2tleV0gPSB0cnVlOwogICAgICB9KTsKICAgICAgcmV0dXJuIGtleXM7CiAgICB9LAogICAgaGFzU2VsZWN0aW9uTW9kZTogZnVuY3Rpb24gaGFzU2VsZWN0aW9uTW9kZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uICE9PSAnbm9uZSc7CiAgICB9LAogICAgc2luZ2xlU2VsZWN0aW9uOiBmdW5jdGlvbiBzaW5nbGVTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbiA9PT0gJ3NpbmdsZSc7CiAgICB9LAogICAgbXVsdGlwbGVTZWxlY3Rpb246IGZ1bmN0aW9uIG11bHRpcGxlU2VsZWN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24gPT09ICdtdWx0aXBsZSc7CiAgICB9LAogICAgYWxsUm93c1NlbGVjdGVkOiBmdW5jdGlvbiBhbGxSb3dzU2VsZWN0ZWQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5jb21wdXRlZFJvd3MubGVuZ3RoID4gMCAmJiB0aGlzLmNvbXB1dGVkUm93cy5ldmVyeShmdW5jdGlvbiAocm93KSB7CiAgICAgICAgcmV0dXJuIF90aGlzLnNlbGVjdGVkS2V5c1tfdGhpcy5nZXRSb3dLZXkocm93KV0gPT09IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIHNvbWVSb3dzU2VsZWN0ZWQ6IGZ1bmN0aW9uIHNvbWVSb3dzU2VsZWN0ZWQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIHRoaXMuYWxsUm93c1NlbGVjdGVkICE9PSB0cnVlICYmIHRoaXMuY29tcHV0ZWRSb3dzLnNvbWUoZnVuY3Rpb24gKHJvdykgewogICAgICAgIHJldHVybiBfdGhpczIuc2VsZWN0ZWRLZXlzW190aGlzMi5nZXRSb3dLZXkocm93KV0gPT09IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIHJvd3NTZWxlY3RlZE51bWJlcjogZnVuY3Rpb24gcm93c1NlbGVjdGVkTnVtYmVyKCkgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZC5sZW5ndGg7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBpc1Jvd1NlbGVjdGVkOiBmdW5jdGlvbiBpc1Jvd1NlbGVjdGVkKGtleSkgewogICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEtleXNba2V5XSA9PT0gdHJ1ZTsKICAgIH0sCiAgICBjbGVhclNlbGVjdGlvbjogZnVuY3Rpb24gY2xlYXJTZWxlY3Rpb24oKSB7CiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpzZWxlY3RlZCcsIFtdKTsKICAgIH0sCiAgICBfX3VwZGF0ZVNlbGVjdGlvbjogZnVuY3Rpb24gX191cGRhdGVTZWxlY3Rpb24oa2V5cywgcm93cywgYWRkZWQsIGV2dCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdGlvbicsIHsKICAgICAgICByb3dzOiByb3dzLAogICAgICAgIGFkZGVkOiBhZGRlZCwKICAgICAgICBrZXlzOiBrZXlzLAogICAgICAgIGV2dDogZXZ0CiAgICAgIH0pOwogICAgICB2YXIgcGF5bG9hZCA9IHRoaXMuc2luZ2xlU2VsZWN0aW9uID09PSB0cnVlID8gYWRkZWQgPT09IHRydWUgPyByb3dzIDogW10gOiBhZGRlZCA9PT0gdHJ1ZSA/IHRoaXMuc2VsZWN0ZWQuY29uY2F0KHJvd3MpIDogdGhpcy5zZWxlY3RlZC5maWx0ZXIoZnVuY3Rpb24gKHJvdykgewogICAgICAgIHJldHVybiBrZXlzLmluY2x1ZGVzKF90aGlzMy5nZXRSb3dLZXkocm93KSkgPT09IGZhbHNlOwogICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNlbGVjdGVkJywgcGF5bG9hZCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/table/table-row-selection.js"],"names":["props","selection","type","String","default","validator","v","includes","selected","Array","computed","selectedKeys","keys","map","getRowKey","forEach","key","hasSelectionMode","singleSelection","multipleSelection","allRowsSelected","computedRows","length","every","row","someRowsSelected","some","rowsSelectedNumber","methods","isRowSelected","clearSelection","$emit","__updateSelection","rows","added","evt","payload","concat","filter"],"mappings":"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","sourcesContent":["export default {\n  props: {\n    selection: {\n      type: String,\n      default: 'none',\n      validator: v => ['single', 'multiple', 'none'].includes(v)\n    },\n    selected: {\n      type: Array,\n      default: () => []\n    }\n  },\n\n  computed: {\n    selectedKeys () {\n      const keys = {}\n      this.selected.map(this.getRowKey).forEach(key => {\n        keys[key] = true\n      })\n      return keys\n    },\n\n    hasSelectionMode () {\n      return this.selection !== 'none'\n    },\n\n    singleSelection () {\n      return this.selection === 'single'\n    },\n\n    multipleSelection () {\n      return this.selection === 'multiple'\n    },\n\n    allRowsSelected () {\n      return this.computedRows.length > 0 && this.computedRows.every(\n        row => this.selectedKeys[ this.getRowKey(row) ] === true\n      )\n    },\n\n    someRowsSelected () {\n      return this.allRowsSelected !== true &&\n        this.computedRows.some(row => this.selectedKeys[ this.getRowKey(row) ] === true)\n    },\n\n    rowsSelectedNumber () {\n      return this.selected.length\n    }\n  },\n\n  methods: {\n    isRowSelected (key) {\n      return this.selectedKeys[key] === true\n    },\n\n    clearSelection () {\n      this.$emit('update:selected', [])\n    },\n\n    __updateSelection (keys, rows, added, evt) {\n      this.$emit('selection', { rows, added, keys, evt })\n\n      const payload = this.singleSelection === true\n        ? (added === true ? rows : [])\n        : (\n          added === true\n            ? this.selected.concat(rows)\n            : this.selected.filter(\n              row => keys.includes(this.getRowKey(row)) === false\n            )\n        )\n\n      this.$emit('update:selected', payload)\n    }\n  }\n}\n"]}]}