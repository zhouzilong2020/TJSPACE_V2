{"remainingRequest":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js!/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/utils/uid.js","dependencies":[{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/utils/uid.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4iOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZyI7CgovKioKICogQmFzZWQgb24gdGhlIHdvcmsgb2YgaHR0cHM6Ly9naXRodWIuY29tL2pjaG9vay91dWlkLXJhbmRvbQogKi8KdmFyIGJ1ZiwKICAgIGJ1ZklkeCA9IDA7CnZhciBoZXhCeXRlcyA9IG5ldyBBcnJheSgyNTYpOyAvLyBQcmUtY2FsY3VsYXRlIHRvU3RyaW5nKDE2KSBmb3Igc3BlZWQKCmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHsKICBoZXhCeXRlc1tpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7Cn0gLy8gVXNlIGJlc3QgYXZhaWxhYmxlIFBSTkcKCgp2YXIgcmFuZG9tQnl0ZXMgPSBmdW5jdGlvbiAoKSB7CiAgLy8gTm9kZSAmIEJyb3dzZXIgc3VwcG9ydAogIHZhciBsaWIgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyA/IGNyeXB0byA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93Lm1zQ3J5cHRvIC8vIElFMTEKICA6IHZvaWQgMDsKCiAgaWYgKGxpYiAhPT0gdm9pZCAwKSB7CiAgICBpZiAobGliLnJhbmRvbUJ5dGVzICE9PSB2b2lkIDApIHsKICAgICAgcmV0dXJuIGxpYi5yYW5kb21CeXRlczsKICAgIH0KCiAgICBpZiAobGliLmdldFJhbmRvbVZhbHVlcyAhPT0gdm9pZCAwKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAobikgewogICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KG4pOwogICAgICAgIGxpYi5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpOwogICAgICAgIHJldHVybiBieXRlczsKICAgICAgfTsKICAgIH0KICB9CgogIHJldHVybiBmdW5jdGlvbiAobikgewogICAgdmFyIHIgPSBbXTsKCiAgICBmb3IgKHZhciBfaSA9IG47IF9pID4gMDsgX2ktLSkgewogICAgICByLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSk7CiAgICB9CgogICAgcmV0dXJuIHI7CiAgfTsKfSgpOyAvLyBCdWZmZXIgcmFuZG9tIG51bWJlcnMgZm9yIHNwZWVkCi8vIFJlZHVjZSBtZW1vcnkgdXNhZ2UgYnkgZGVjcmVhc2luZyB0aGlzIG51bWJlciAobWluIDE2KQovLyBvciBpbXByb3ZlIHNwZWVkIGJ5IGluY3JlYXNpbmcgdGhpcyBudW1iZXIgKHRyeSAxNjM4NCkKCgp2YXIgQlVGRkVSX1NJWkUgPSA0MDk2OwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7CiAgLy8gQnVmZmVyIHNvbWUgcmFuZG9tIGJ5dGVzIGZvciBzcGVlZAogIGlmIChidWYgPT09IHZvaWQgMCB8fCBidWZJZHggKyAxNiA+IEJVRkZFUl9TSVpFKSB7CiAgICBidWZJZHggPSAwOwogICAgYnVmID0gcmFuZG9tQnl0ZXMoQlVGRkVSX1NJWkUpOwogIH0KCiAgdmFyIGIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChidWYsIGJ1ZklkeCwgYnVmSWR4ICs9IDE2KTsKICBiWzZdID0gYls2XSAmIDB4MGYgfCAweDQwOwogIGJbOF0gPSBiWzhdICYgMHgzZiB8IDB4ODA7CiAgcmV0dXJuIGhleEJ5dGVzW2JbMF1dICsgaGV4Qnl0ZXNbYlsxXV0gKyBoZXhCeXRlc1tiWzJdXSArIGhleEJ5dGVzW2JbM11dICsgJy0nICsgaGV4Qnl0ZXNbYls0XV0gKyBoZXhCeXRlc1tiWzVdXSArICctJyArIGhleEJ5dGVzW2JbNl1dICsgaGV4Qnl0ZXNbYls3XV0gKyAnLScgKyBoZXhCeXRlc1tiWzhdXSArIGhleEJ5dGVzW2JbOV1dICsgJy0nICsgaGV4Qnl0ZXNbYlsxMF1dICsgaGV4Qnl0ZXNbYlsxMV1dICsgaGV4Qnl0ZXNbYlsxMl1dICsgaGV4Qnl0ZXNbYlsxM11dICsgaGV4Qnl0ZXNbYlsxNF1dICsgaGV4Qnl0ZXNbYlsxNV1dOwp9"},{"version":3,"sources":["/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/utils/uid.js"],"names":["buf","bufIdx","hexBytes","Array","i","toString","substr","randomBytes","lib","crypto","window","msCrypto","getRandomValues","n","bytes","Uint8Array","r","push","Math","floor","random","BUFFER_SIZE","b","prototype","slice","call"],"mappings":"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","sourcesContent":["/**\n * Based on the work of https://github.com/jchook/uuid-random\n */\n\nlet\n  buf,\n  bufIdx = 0\nconst hexBytes = new Array(256)\n\n// Pre-calculate toString(16) for speed\nfor (let i = 0; i < 256; i++) {\n  hexBytes[i] = (i + 0x100).toString(16).substr(1)\n}\n\n// Use best available PRNG\nconst randomBytes = (() => {\n  // Node & Browser support\n  const lib = typeof crypto !== 'undefined'\n    ? crypto\n    : (\n      typeof window !== 'undefined'\n        ? window.msCrypto // IE11\n        : void 0\n    )\n\n  if (lib !== void 0) {\n    if (lib.randomBytes !== void 0) {\n      return lib.randomBytes\n    }\n    if (lib.getRandomValues !== void 0) {\n      return n => {\n        var bytes = new Uint8Array(n)\n        lib.getRandomValues(bytes)\n        return bytes\n      }\n    }\n  }\n\n  return n => {\n    const r = []\n    for (let i = n; i > 0; i--) {\n      r.push(Math.floor(Math.random() * 256))\n    }\n    return r\n  }\n})()\n\n// Buffer random numbers for speed\n// Reduce memory usage by decreasing this number (min 16)\n// or improve speed by increasing this number (try 16384)\nconst BUFFER_SIZE = 4096\n\nexport default function () {\n  // Buffer some random bytes for speed\n  if (buf === void 0 || (bufIdx + 16 > BUFFER_SIZE)) {\n    bufIdx = 0\n    buf = randomBytes(BUFFER_SIZE)\n  }\n\n  const b = Array.prototype.slice.call(buf, bufIdx, (bufIdx += 16))\n  b[6] = (b[6] & 0x0f) | 0x40\n  b[8] = (b[8] & 0x3f) | 0x80\n\n  return hexBytes[b[0]] + hexBytes[b[1]] +\n    hexBytes[b[2]] + hexBytes[b[3]] + '-' +\n    hexBytes[b[4]] + hexBytes[b[5]] + '-' +\n    hexBytes[b[6]] + hexBytes[b[7]] + '-' +\n    hexBytes[b[8]] + hexBytes[b[9]] + '-' +\n    hexBytes[b[10]] + hexBytes[b[11]] +\n    hexBytes[b[12]] + hexBytes[b[13]] +\n    hexBytes[b[14]] + hexBytes[b[15]]\n}\n"]}]}