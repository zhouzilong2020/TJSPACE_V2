{"remainingRequest":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js!/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/uploader/uploader-xhr-mixin.js","dependencies":[{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/uploader/uploader-xhr-mixin.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKCmZ1bmN0aW9uIGdldEZuKHByb3ApIHsKICByZXR1cm4gdHlwZW9mIHByb3AgPT09ICdmdW5jdGlvbicgPyBwcm9wIDogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHByb3A7CiAgfTsKfQoKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICB1cmw6IFtGdW5jdGlvbiwgU3RyaW5nXSwKICAgIG1ldGhvZDogewogICAgICB0eXBlOiBbRnVuY3Rpb24sIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6ICdQT1NUJwogICAgfSwKICAgIGZpZWxkTmFtZTogewogICAgICB0eXBlOiBbRnVuY3Rpb24sIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KGZpbGUpIHsKICAgICAgICByZXR1cm4gZmlsZS5uYW1lOwogICAgICB9CiAgICB9LAogICAgaGVhZGVyczogW0Z1bmN0aW9uLCBBcnJheV0sCiAgICBmb3JtRmllbGRzOiBbRnVuY3Rpb24sIEFycmF5XSwKICAgIHdpdGhDcmVkZW50aWFsczogW0Z1bmN0aW9uLCBCb29sZWFuXSwKICAgIHNlbmRSYXc6IFtGdW5jdGlvbiwgQm9vbGVhbl0sCiAgICBiYXRjaDogW0Z1bmN0aW9uLCBCb29sZWFuXSwKICAgIGZhY3Rvcnk6IEZ1bmN0aW9uCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgeGhyczogW10sCiAgICAgIHByb21pc2VzOiBbXSwKICAgICAgd29ya2luZ1RocmVhZHM6IDAKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgeGhyUHJvcHM6IGZ1bmN0aW9uIHhoclByb3BzKCkgewogICAgICByZXR1cm4gewogICAgICAgIHVybDogZ2V0Rm4odGhpcy51cmwpLAogICAgICAgIG1ldGhvZDogZ2V0Rm4odGhpcy5tZXRob2QpLAogICAgICAgIGhlYWRlcnM6IGdldEZuKHRoaXMuaGVhZGVycyksCiAgICAgICAgZm9ybUZpZWxkczogZ2V0Rm4odGhpcy5mb3JtRmllbGRzKSwKICAgICAgICBmaWVsZE5hbWU6IGdldEZuKHRoaXMuZmllbGROYW1lKSwKICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IGdldEZuKHRoaXMud2l0aENyZWRlbnRpYWxzKSwKICAgICAgICBzZW5kUmF3OiBnZXRGbih0aGlzLnNlbmRSYXcpLAogICAgICAgIGJhdGNoOiBnZXRGbih0aGlzLmJhdGNoKQogICAgICB9OwogICAgfSwKICAgIGlzVXBsb2FkaW5nOiBmdW5jdGlvbiBpc1VwbG9hZGluZygpIHsKICAgICAgcmV0dXJuIHRoaXMud29ya2luZ1RocmVhZHMgPiAwOwogICAgfSwKICAgIGlzQnVzeTogZnVuY3Rpb24gaXNCdXN5KCkgewogICAgICByZXR1cm4gdGhpcy5wcm9taXNlcy5sZW5ndGggPiAwOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkgewogICAgICB0aGlzLnhocnMuZm9yRWFjaChmdW5jdGlvbiAoeCkgewogICAgICAgIHguYWJvcnQoKTsKICAgICAgfSk7CgogICAgICBpZiAodGhpcy5wcm9taXNlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5hYm9ydFByb21pc2VzID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIHVwbG9hZDogZnVuY3Rpb24gdXBsb2FkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMuY2FuVXBsb2FkID09PSBmYWxzZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZWRGaWxlcy5zbGljZSgwKTsKICAgICAgdGhpcy5xdWV1ZWRGaWxlcyA9IFtdOwoKICAgICAgaWYgKHRoaXMueGhyUHJvcHMuYmF0Y2gocXVldWUpKSB7CiAgICAgICAgdGhpcy5fX3J1bkZhY3RvcnkocXVldWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHsKICAgICAgICAgIF90aGlzLl9fcnVuRmFjdG9yeShbZmlsZV0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgX19ydW5GYWN0b3J5OiBmdW5jdGlvbiBfX3J1bkZhY3RvcnkoZmlsZXMpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLndvcmtpbmdUaHJlYWRzKys7CgogICAgICBpZiAodHlwZW9mIHRoaXMuZmFjdG9yeSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRoaXMuX191cGxvYWRGaWxlcyhmaWxlcywge30pOwoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciByZXMgPSB0aGlzLmZhY3RvcnkoZmlsZXMpOwoKICAgICAgaWYgKCFyZXMpIHsKICAgICAgICB0aGlzLiRlbWl0KCdmYWN0b3J5LWZhaWxlZCcsIG5ldyBFcnJvcignUVVwbG9hZGVyOiBmYWN0b3J5KCkgZG9lcyBub3QgcmV0dXJuIHByb3Blcmx5JyksIGZpbGVzKTsKICAgICAgICB0aGlzLndvcmtpbmdUaHJlYWRzLS07CiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlcy5jYXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB0aGlzLnByb21pc2VzLnB1c2gocmVzKTsKCiAgICAgICAgdmFyIGZhaWxlZCA9IGZ1bmN0aW9uIGZhaWxlZChlcnIpIHsKICAgICAgICAgIGlmIChfdGhpczIuX2lzQmVpbmdEZXN0cm95ZWQgIT09IHRydWUgJiYgX3RoaXMyLl9pc0Rlc3Ryb3llZCAhPT0gdHJ1ZSkgewogICAgICAgICAgICBfdGhpczIucHJvbWlzZXMgPSBfdGhpczIucHJvbWlzZXMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHAgIT09IHJlczsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoX3RoaXMyLnByb21pc2VzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIF90aGlzMi5hYm9ydFByb21pc2VzID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF90aGlzMi5xdWV1ZWRGaWxlcyA9IF90aGlzMi5xdWV1ZWRGaWxlcy5jb25jYXQoZmlsZXMpOwogICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7CiAgICAgICAgICAgICAgX3RoaXMyLl9fdXBkYXRlRmlsZShmLCAnZmFpbGVkJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgX3RoaXMyLiRlbWl0KCdmYWN0b3J5LWZhaWxlZCcsIGVyciwgZmlsZXMpOwoKICAgICAgICAgICAgX3RoaXMyLndvcmtpbmdUaHJlYWRzLS07CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgcmVzLnRoZW4oZnVuY3Rpb24gKGZhY3RvcnkpIHsKICAgICAgICAgIGlmIChfdGhpczIuYWJvcnRQcm9taXNlcyA9PT0gdHJ1ZSkgewogICAgICAgICAgICBmYWlsZWQobmV3IEVycm9yKCdBYm9ydGVkJykpOwogICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuX2lzQmVpbmdEZXN0cm95ZWQgIT09IHRydWUgJiYgX3RoaXMyLl9pc0Rlc3Ryb3llZCAhPT0gdHJ1ZSkgewogICAgICAgICAgICBfdGhpczIucHJvbWlzZXMgPSBfdGhpczIucHJvbWlzZXMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHAgIT09IHJlczsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBfdGhpczIuX191cGxvYWRGaWxlcyhmaWxlcywgZmFjdG9yeSk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZmFpbGVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9fdXBsb2FkRmlsZXMoZmlsZXMsIHJlcyB8fCB7fSk7CiAgICAgIH0KICAgIH0sCiAgICBfX3VwbG9hZEZpbGVzOiBmdW5jdGlvbiBfX3VwbG9hZEZpbGVzKGZpbGVzLCBmYWN0b3J5KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKSwKICAgICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAgICAgdmFyIGdldFByb3AgPSBmdW5jdGlvbiBnZXRQcm9wKG5hbWUsIGFyZykgewogICAgICAgIHJldHVybiBmYWN0b3J5W25hbWVdICE9PSB2b2lkIDAgPyBnZXRGbihmYWN0b3J5W25hbWVdKShhcmcpIDogX3RoaXMzLnhoclByb3BzW25hbWVdKGFyZyk7CiAgICAgIH07CgogICAgICB2YXIgdXJsID0gZ2V0UHJvcCgndXJsJywgZmlsZXMpOwoKICAgICAgaWYgKCF1cmwpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdxLXVwbG9hZGVyOiBpbnZhbGlkIG9yIG5vIFVSTCBzcGVjaWZpZWQnKTsKICAgICAgICB0aGlzLndvcmtpbmdUaHJlYWRzLS07CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgZmllbGRzID0gZ2V0UHJvcCgnZm9ybUZpZWxkcycsIGZpbGVzKTsKICAgICAgZmllbGRzICE9PSB2b2lkIDAgJiYgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgZm9ybS5hcHBlbmQoZmllbGQubmFtZSwgZmllbGQudmFsdWUpOwogICAgICB9KTsKICAgICAgdmFyIHVwbG9hZEluZGV4ID0gMCwKICAgICAgICAgIHVwbG9hZEluZGV4U2l6ZSA9IDAsCiAgICAgICAgICB1cGxvYWRlZFNpemUgPSAwLAogICAgICAgICAgbWF4VXBsb2FkU2l6ZSA9IDAsCiAgICAgICAgICBhYm9ydGVkOwogICAgICB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoYWJvcnRlZCA9PT0gdHJ1ZSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxvYWRlZCA9IE1hdGgubWluKG1heFVwbG9hZFNpemUsIGUubG9hZGVkKTsKICAgICAgICBfdGhpczMudXBsb2FkZWRTaXplICs9IGxvYWRlZCAtIHVwbG9hZGVkU2l6ZTsKICAgICAgICB1cGxvYWRlZFNpemUgPSBsb2FkZWQ7CiAgICAgICAgdmFyIHNpemUgPSB1cGxvYWRlZFNpemUgLSB1cGxvYWRJbmRleFNpemU7CgogICAgICAgIGZvciAodmFyIGkgPSB1cGxvYWRJbmRleDsgc2l6ZSA+IDAgJiYgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzW2ldLAogICAgICAgICAgICAgIHVwbG9hZGVkID0gc2l6ZSA+IGZpbGUuc2l6ZTsKCiAgICAgICAgICBpZiAodXBsb2FkZWQpIHsKICAgICAgICAgICAgc2l6ZSAtPSBmaWxlLnNpemU7CiAgICAgICAgICAgIHVwbG9hZEluZGV4Kys7CiAgICAgICAgICAgIHVwbG9hZEluZGV4U2l6ZSArPSBmaWxlLnNpemU7CgogICAgICAgICAgICBfdGhpczMuX191cGRhdGVGaWxlKGZpbGUsICd1cGxvYWRpbmcnLCBmaWxlLnNpemUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMzLl9fdXBkYXRlRmlsZShmaWxlLCAndXBsb2FkaW5nJywgc2l6ZSk7CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBmYWxzZSk7CgogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA8IDQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICh4aHIuc3RhdHVzICYmIHhoci5zdGF0dXMgPCA0MDApIHsKICAgICAgICAgIF90aGlzMy51cGxvYWRlZEZpbGVzID0gX3RoaXMzLnVwbG9hZGVkRmlsZXMuY29uY2F0KGZpbGVzKTsKICAgICAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgX3RoaXMzLl9fdXBkYXRlRmlsZShmLCAndXBsb2FkZWQnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzMy4kZW1pdCgndXBsb2FkZWQnLCB7CiAgICAgICAgICAgIGZpbGVzOiBmaWxlcywKICAgICAgICAgICAgeGhyOiB4aHIKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhYm9ydGVkID0gdHJ1ZTsKICAgICAgICAgIF90aGlzMy51cGxvYWRlZFNpemUgLT0gdXBsb2FkZWRTaXplOwogICAgICAgICAgX3RoaXMzLnF1ZXVlZEZpbGVzID0gX3RoaXMzLnF1ZXVlZEZpbGVzLmNvbmNhdChmaWxlcyk7CiAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7CiAgICAgICAgICAgIF90aGlzMy5fX3VwZGF0ZUZpbGUoZiwgJ2ZhaWxlZCcpOwogICAgICAgICAgfSk7CgogICAgICAgICAgX3RoaXMzLiRlbWl0KCdmYWlsZWQnLCB7CiAgICAgICAgICAgIGZpbGVzOiBmaWxlcywKICAgICAgICAgICAgeGhyOiB4aHIKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMzLndvcmtpbmdUaHJlYWRzLS07CiAgICAgICAgX3RoaXMzLnhocnMgPSBfdGhpczMueGhycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgIHJldHVybiB4ICE9PSB4aHI7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICB4aHIub3BlbihnZXRQcm9wKCdtZXRob2QnLCBmaWxlcyksIHVybCk7CgogICAgICBpZiAoZ2V0UHJvcCgnd2l0aENyZWRlbnRpYWxzJywgZmlsZXMpID09PSB0cnVlKSB7CiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7CiAgICAgIH0KCiAgICAgIHZhciBoZWFkZXJzID0gZ2V0UHJvcCgnaGVhZGVycycsIGZpbGVzKTsKICAgICAgaGVhZGVycyAhPT0gdm9pZCAwICYmIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZCkgewogICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWQubmFtZSwgaGVhZC52YWx1ZSk7CiAgICAgIH0pOwogICAgICB2YXIgc2VuZFJhdyA9IGdldFByb3AoJ3NlbmRSYXcnLCBmaWxlcyk7CiAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHsKICAgICAgICBfdGhpczMuX191cGRhdGVGaWxlKGZpbGUsICd1cGxvYWRpbmcnLCAwKTsKCiAgICAgICAgaWYgKHNlbmRSYXcgIT09IHRydWUpIHsKICAgICAgICAgIGZvcm0uYXBwZW5kKGdldFByb3AoJ2ZpZWxkTmFtZScsIGZpbGUpLCBmaWxlLCBmaWxlLm5hbWUpOwogICAgICAgIH0KCiAgICAgICAgZmlsZS54aHIgPSB4aHI7CgogICAgICAgIGZpbGUuX19hYm9ydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHhoci5hYm9ydCgpOwogICAgICAgIH07CgogICAgICAgIG1heFVwbG9hZFNpemUgKz0gZmlsZS5zaXplOwogICAgICB9KTsKICAgICAgdGhpcy4kZW1pdCgndXBsb2FkaW5nJywgewogICAgICAgIGZpbGVzOiBmaWxlcywKICAgICAgICB4aHI6IHhocgogICAgICB9KTsKICAgICAgdGhpcy54aHJzLnB1c2goeGhyKTsKCiAgICAgIGlmIChzZW5kUmF3ID09PSB0cnVlKSB7CiAgICAgICAgeGhyLnNlbmQobmV3IEJsb2IoZmlsZXMpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB4aHIuc2VuZChmb3JtKTsKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/zhouzilong/Desktop/2020-09-19-0005/node_modules/quasar/src/components/uploader/uploader-xhr-mixin.js"],"names":["getFn","prop","props","url","Function","String","method","type","default","fieldName","file","name","headers","Array","formFields","withCredentials","Boolean","sendRaw","batch","factory","data","xhrs","promises","workingThreads","computed","xhrProps","isUploading","isBusy","length","methods","abort","forEach","x","abortPromises","upload","canUpload","queue","queuedFiles","slice","__runFactory","files","__uploadFiles","res","$emit","Error","catch","then","push","failed","err","_isBeingDestroyed","_isDestroyed","filter","p","concat","f","__updateFile","form","FormData","xhr","XMLHttpRequest","getProp","arg","console","error","fields","field","append","value","uploadIndex","uploadIndexSize","uploadedSize","maxUploadSize","aborted","addEventListener","e","loaded","Math","min","size","i","uploaded","onreadystatechange","readyState","status","uploadedFiles","open","head","setRequestHeader","__abort","send","Blob"],"mappings":"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","sourcesContent":["function getFn (prop) {\n  return typeof prop === 'function'\n    ? prop\n    : () => prop\n}\n\nexport default {\n  props: {\n    url: [ Function, String ],\n    method: {\n      type: [ Function, String ],\n      default: 'POST'\n    },\n    fieldName: {\n      type: [ Function, String ],\n      default: file => file.name\n    },\n    headers: [ Function, Array ],\n    formFields: [ Function, Array ],\n    withCredentials: [ Function, Boolean ],\n    sendRaw: [ Function, Boolean ],\n\n    batch: [ Function, Boolean ],\n    factory: Function\n  },\n\n  data () {\n    return {\n      xhrs: [],\n      promises: [],\n      workingThreads: 0\n    }\n  },\n\n  computed: {\n    xhrProps () {\n      return {\n        url: getFn(this.url),\n        method: getFn(this.method),\n        headers: getFn(this.headers),\n        formFields: getFn(this.formFields),\n        fieldName: getFn(this.fieldName),\n        withCredentials: getFn(this.withCredentials),\n        sendRaw: getFn(this.sendRaw),\n        batch: getFn(this.batch)\n      }\n    },\n\n    isUploading () {\n      return this.workingThreads > 0\n    },\n\n    isBusy () {\n      return this.promises.length > 0\n    }\n  },\n\n  methods: {\n    abort () {\n      this.xhrs.forEach(x => { x.abort() })\n\n      if (this.promises.length > 0) {\n        this.abortPromises = true\n      }\n    },\n\n    upload () {\n      if (this.canUpload === false) {\n        return\n      }\n\n      const queue = this.queuedFiles.slice(0)\n      this.queuedFiles = []\n\n      if (this.xhrProps.batch(queue)) {\n        this.__runFactory(queue)\n      }\n      else {\n        queue.forEach(file => {\n          this.__runFactory([ file ])\n        })\n      }\n    },\n\n    __runFactory (files) {\n      this.workingThreads++\n\n      if (typeof this.factory !== 'function') {\n        this.__uploadFiles(files, {})\n        return\n      }\n\n      const res = this.factory(files)\n\n      if (!res) {\n        this.$emit(\n          'factory-failed',\n          new Error('QUploader: factory() does not return properly'),\n          files\n        )\n        this.workingThreads--\n      }\n      else if (typeof res.catch === 'function' && typeof res.then === 'function') {\n        this.promises.push(res)\n\n        const failed = err => {\n          if (this._isBeingDestroyed !== true && this._isDestroyed !== true) {\n            this.promises = this.promises.filter(p => p !== res)\n\n            if (this.promises.length === 0) {\n              this.abortPromises = false\n            }\n\n            this.queuedFiles = this.queuedFiles.concat(files)\n            files.forEach(f => { this.__updateFile(f, 'failed') })\n\n            this.$emit('factory-failed', err, files)\n            this.workingThreads--\n          }\n        }\n\n        res.then(factory => {\n          if (this.abortPromises === true) {\n            failed(new Error('Aborted'))\n          }\n          else if (this._isBeingDestroyed !== true && this._isDestroyed !== true) {\n            this.promises = this.promises.filter(p => p !== res)\n            this.__uploadFiles(files, factory)\n          }\n        }).catch(failed)\n      }\n      else {\n        this.__uploadFiles(files, res || {})\n      }\n    },\n\n    __uploadFiles (files, factory) {\n      const\n        form = new FormData(),\n        xhr = new XMLHttpRequest()\n\n      const getProp = (name, arg) => {\n        return factory[name] !== void 0\n          ? getFn(factory[name])(arg)\n          : this.xhrProps[name](arg)\n      }\n\n      const url = getProp('url', files)\n\n      if (!url) {\n        console.error('q-uploader: invalid or no URL specified')\n        this.workingThreads--\n        return\n      }\n\n      const fields = getProp('formFields', files)\n      fields !== void 0 && fields.forEach(field => {\n        form.append(field.name, field.value)\n      })\n\n      let\n        uploadIndex = 0,\n        uploadIndexSize = 0,\n        uploadedSize = 0,\n        maxUploadSize = 0,\n        aborted\n\n      xhr.upload.addEventListener('progress', e => {\n        if (aborted === true) { return }\n\n        const loaded = Math.min(maxUploadSize, e.loaded)\n\n        this.uploadedSize += loaded - uploadedSize\n        uploadedSize = loaded\n\n        let size = uploadedSize - uploadIndexSize\n        for (let i = uploadIndex; size > 0 && i < files.length; i++) {\n          const\n            file = files[i],\n            uploaded = size > file.size\n\n          if (uploaded) {\n            size -= file.size\n            uploadIndex++\n            uploadIndexSize += file.size\n            this.__updateFile(file, 'uploading', file.size)\n          }\n          else {\n            this.__updateFile(file, 'uploading', size)\n            return\n          }\n        }\n      }, false)\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState < 4) {\n          return\n        }\n\n        if (xhr.status && xhr.status < 400) {\n          this.uploadedFiles = this.uploadedFiles.concat(files)\n          files.forEach(f => { this.__updateFile(f, 'uploaded') })\n          this.$emit('uploaded', { files, xhr })\n        }\n        else {\n          aborted = true\n          this.uploadedSize -= uploadedSize\n          this.queuedFiles = this.queuedFiles.concat(files)\n          files.forEach(f => { this.__updateFile(f, 'failed') })\n          this.$emit('failed', { files, xhr })\n        }\n\n        this.workingThreads--\n        this.xhrs = this.xhrs.filter(x => x !== xhr)\n      }\n\n      xhr.open(\n        getProp('method', files),\n        url\n      )\n\n      if (getProp('withCredentials', files) === true) {\n        xhr.withCredentials = true\n      }\n\n      const headers = getProp('headers', files)\n      headers !== void 0 && headers.forEach(head => {\n        xhr.setRequestHeader(head.name, head.value)\n      })\n\n      const sendRaw = getProp('sendRaw', files)\n\n      files.forEach(file => {\n        this.__updateFile(file, 'uploading', 0)\n        if (sendRaw !== true) {\n          form.append(getProp('fieldName', file), file, file.name)\n        }\n        file.xhr = xhr\n        file.__abort = () => { xhr.abort() }\n        maxUploadSize += file.size\n      })\n\n      this.$emit('uploading', { files, xhr })\n      this.xhrs.push(xhr)\n\n      if (sendRaw === true) {\n        xhr.send(new Blob(files))\n      }\n      else {\n        xhr.send(form)\n      }\n    }\n  }\n}\n"]}]}